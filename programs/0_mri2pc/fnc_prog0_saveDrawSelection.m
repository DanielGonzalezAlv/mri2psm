function fnc_prog0_saveDrawSelection (varargin)
% MRI2PSM v0.1 - Patient-specific rigid body modeling from MRI images
% Copyright (c) 2016 Manish Sreenivasa <manish.sreenivasa@iwr.uni-heidelberg.de>, Daniel Gonzalez Alvarado, Carlos Javier Gonzalez Chamorro, Heidelberg University, Germany
%
% Licensed under the zlib license. See LICENSE for more details.
%

% Load variables from Workspace
hardbone_segm   = evalin('base','tmp_hardbone_segm');
boneFat_segm    = evalin('base','tmp_boneFat_segm');
muscle_segm     = evalin('base','tmp_muscle_segm');
currScanNr      = evalin('base','currScanNr');
boundaries      = evalin('base','boundaries');
data_bmf        = evalin('base','data_bmf');
nmbBound        = evalin('base','nmbBound');
bSave           = evalin('base','bSave');
dataExist_bmf   = evalin('base','dataExist_bmf');
deleteSelection = evalin('base','deleteSelection');
figure2         = evalin('base','figure2');

% if Delete Selection button was pressed
if deleteSelection == 1
    data_bmf(currScanNr).chosenBoundaries=[[]];
    deleteSelection = 0;
end

% Save Boundary
if ~isempty(boundaries) % If some Boundary was selected
    if isempty(data_bmf)  
        data_bmf(currScanNr).chosenBoundaries = {boundaries};
        data_bmf(currScanNr).IndexFromBoundToBone = [];
    else
        try
            data_bmf(currScanNr).chosenBoundaries(length(data_bmf(currScanNr).chosenBoundaries)+1) = {boundaries};
        catch
            data_bmf(currScanNr).chosenBoundaries = {boundaries};
        end
    end
    display(['Recorded boundary for slice number ', int2str(currScanNr), ' in local memory']);
    boundaries = [];
end

% Save variables on the workspace
assignin('base', 'data_bmf', data_bmf);
assignin('base', 'deleteSelection', deleteSelection);
assignin('base', 'muscle_segm', muscle_segm);
assignin('base', 'hardbone_segm', hardbone_segm);
assignin('base', 'boneFat_segm', boneFat_segm);
assignin('base', 'boundaries', boundaries);

% Save changes from data_bmf
if bSave
    save(dataExist_bmf, 'data_bmf')
    display(['Saved changes for slice number ', int2str(currScanNr), ' to file data_bmf']);
end

% Refresh Plot
cla(figure2);
figure2 = subplot (1, 10, [2 7]);
axis equal; axis tight; hold on;
spy(boneFat_segm, 'y'); spy(muscle_segm, 'r'); spy(hardbone_segm, 'k');

% Plot Existing Boundaries
if ~isempty(data_bmf)
    try 
        for i=1:1:length(data_bmf(currScanNr).chosenBoundaries)
            plot(data_bmf(currScanNr).chosenBoundaries{i}(:,2), data_bmf(currScanNr).chosenBoundaries{i}(:,1), 'ob', 'markers', 5, 'MarkerFaceColor', 'b')
        end
    catch
        display ('Unable to plot boundaries');
    end
end
title(['Scan Number:  ', num2str(currScanNr)])

% Define Buttons uicontrol
DrawSelection= uicontrol('style','pushbutton',...
    'unit','pix',...
    'position',[40 500 280 40],...
    'fontsize',12,...
    'fontweight','bold',...
    'string','Draw/Select',...
    'Callback',@fnc_prog0_drawSelection);
SaveDrawSelection= uicontrol('style','text',...
    'unit','pix',...
    'position',[40 450 280 40],...
    'fontsize',12,...
    'fontweight','bold',...
    'string','Save');
Cancel= uicontrol('style','text',...
    'unit','pix',...
    'position',[40 400 280 40],...
    'fontsize',12,...
    'fontweight','bold',...
    'string','Cancel');
NextScan= uicontrol('style','pushbutton',...
    'unit','pix',...
    'position',[40 350 280 40],...
    'fontsize',12,...
    'fontweight','bold',...
    'string','Next scan',...
    'Callback',@fnc_prog0_nextScan);
PreviousScan= uicontrol('style','pushbutton',...
    'unit','pix',...
    'position',[40 300 280 40],...
    'fontsize',12,...
    'fontweight','bold',...
    'string','Previous scan',...
    'Callback',@fnc_prog0_previousScan);
if isempty(data_bmf)
    DeleteSelection= uicontrol('style','text',...
        'unit','pix','position',[40 250 280 40],...
        'fontsize',12,...
        'fontweight','bold',...
        'string','Delete Selection');
else
    try
        if isempty(data_bmf(currScanNr).chosenBoundaries)
            DeleteSelection= uicontrol('style','text',...
                'unit','pix','position',[40 250 280 40],...
                'fontsize',12,...
                'fontweight','bold',...
                'string','Delete Selection');
        else
            DeleteSelection= uicontrol('style','pushbutton',...
                'unit','pix','position',[40 250 280 40],...
                'fontsize',12,...
                'fontweight','bold',...
                'string','Delete Selection', ...
                'Callback',@fnc_prog0_deleteSelection);
        end
    catch
        DeleteSelection= uicontrol('style','text',...
            'unit','pix','position',[40 250 280 40],...
            'fontsize',12,...
            'fontweight','bold',...
            'string','Delete Selection');
    end
end
end
